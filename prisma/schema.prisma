// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output = "../generated/prisma-client"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Professor {
  id                  Int                  @id @default(autoincrement())
  firstName           String
  lastName            String
  username            String               @unique
  email               String               @unique
  password            String
  isAdmin             Boolean              @default(false)
  teachingAssignments TeachingAssignment[]
  Lecture             Lecture[]
}

model Program {
  id      Int       @id @default(autoincrement())
  name    String    @unique // Bachelor, Master
  classes Class[]
  subject Subject[]
}

model Subject {
  id                  Int                  @id @default(autoincrement())
  code                String               @unique // Shembull: CIS280
  name                String // Shembull: Web Development
  programId           Int
  program             Program              @relation(fields: [programId], references: [id])
  teachingAssignments TeachingAssignment[]
  Lecture             Lecture[]
}

model TeachingAssignment {
  id          Int          @id @default(autoincrement())
  professorId Int
  professor   Professor    @relation(fields: [professorId], references: [id])
  subjectId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  typeId      Int
  type        TeachingType @relation(fields: [typeId], references: [id])

  @@unique([professorId, subjectId, classId]) // Prevent duplicate assignments for same professor-subject-class combination
}

model TeachingType {
  id          Int                  @id @default(autoincrement())
  name        String               @unique
  assignments TeachingAssignment[]
  lectures    Lecture[]
}

model Class {
  id                  Int                  @id @default(autoincrement())
  name                String
  programId           Int
  program             Program              @relation(fields: [programId], references: [id])
  students            Student[]
  lectures            Lecture[]
  teachingAssignments TeachingAssignment[]
}

model Student {
  id         Int          @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String       @unique
  classId    Int
  class      Class        @relation(fields: [classId], references: [id])
  attendance Attendance[]
}

model Lecture {
  id          Int           @id @default(autoincrement())
  date        DateTime
  professorId Int
  professor   Professor     @relation(fields: [professorId], references: [id])
  classId     Int
  class       Class         @relation(fields: [classId], references: [id])
  subjectId   Int
  subject     Subject       @relation(fields: [subjectId], references: [id])
  typeId      Int?
  type        TeachingType? @relation(fields: [typeId], references: [id])
  attendance  Attendance[]
}

model Attendance {
  id        Int     @id @default(autoincrement())
  studentId Int
  student   Student @relation(fields: [studentId], references: [id])
  lectureId Int
  lecture   Lecture @relation(fields: [lectureId], references: [id])
  status    String // PRESENT, ABSENT, PARTICIPATED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  PARTICIPATED
}
